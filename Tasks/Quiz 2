**Quiz Questions:**
1. IF Statement:
a) What is the purpose of the IF statement in PL/SQL?
    1. To perform arithmetic operations.
    2. To define user-defined functions.
    3. To enable conditional branching.
    4. To handle exception handling.
2. IF Statement:
a) Which keyword is used in the IF statement to define an alternative condition when the original condition is FALSE?
    1. THEN
    2. ELSE
    3. ELSIF
    4. OTHERWISE
3. Simple CASE:
a) What is the purpose of the simple CASE statement in PL/SQL?
    1. To handle multiple exceptions.
    2. To define user-defined functions.
    3. To enable conditional branching based on specific values.
    4. To perform date and time arithmetic.
4. Simple CASE:
a) In the simple CASE form, the CASE expression is compared with:
    1. Specific values.
    2. Boolean conditions.
    3. Complex expressions.
    4. All of the above.
5. Searched CASE:
a) What is the difference between a simple CASE and a searched CASE in PL/SQL?
    1. A simple CASE has only one WHEN clause, while a searched CASE has multiple WHEN clauses.
    2. A simple CASE can only handle numeric data types, while a searched CASE can handle any data type.
    3. A simple CASE compares the expression with specific values, while a searched CASE evaluates multiple conditions.
    4. A simple CASE requires an ELSE clause, while a searched CASE does not.
6. Searched CASE:
a) Which form of the CASE statement evaluates each condition until it finds a TRUE condition?
    1. Simple CASE
    2. Searched CASE
    3. Both forms evaluate all conditions regardless of their truth value.
    4. None of the above.
7. IF Statement:
a) How do you use the IF statement to handle nested conditions in PL/SQL?
    1. By using nested IF statements inside the main IF block.
    2. By using the CASE statement instead of nested IF statements.
    3. By defining user-defined functions for each condition.
    4. By using the LOOP statement to handle nested conditions.
8. IF Statement:
a) What happens if none of the conditions in the IF statement are TRUE, and there is no ELSE part?
    1. The program raises an exception and terminates.
    2. The program executes the ELSE part (if present) and continues with the next statement.
    3. The program ignores the IF statement and continues with the next statement.
    4. The program enters an infinite loop and crashes.
9. Simple CASE:
a) In the simple CASE form, what is executed when none of the conditions match?
    1. The code following the WHEN keyword with the first matching value.
    2. The code following the THEN keyword with the first matching value.
    3. The code following the ELSE keyword.
    4. The code following the END CASE keyword.
10. Searched CASE:
a) Which of the following statements about the searched CASE statement is true?
1) The searched CASE can only handle numeric data types.
2) The searched CASE cannot handle NULL values in conditions.
3) The searched CASE must have an ELSE clause.
4) The searched CASE evaluates each condition in order and executes the first TRUE condition block.

**Open-Format Questions:**

1. **Open Format:** Provide a practical example of how you would use the IF statement in PL/SQL to check if a given number is positive, negative, or zero.
2. **Open Format:** Create a simple CASE statement in PL/SQL that evaluates the value of the `gender` variable and assigns "Male" or "Female" to the `gender_label` variable based on the value.
3. **Open Format:** Explain the difference between the simple CASE and searched CASE forms in the CASE statement. Provide scenarios where each form is more suitable.
4. **Open Format:** Describe a scenario where you would use nested IF statements to handle multiple conditions in PL/SQL. Provide an example of how you would implement it.
5. **Open Format:** How do you use the CASE statement to handle multiple conditions with complex expressions in PL/SQL? Provide a practical example to demonstrate its usage.


**ANSWERS**
1. c
2. c
3. c
4. a
5. c
6. b
7. a
8.c
9.c
10. d

1.
DECLARE
    number_to_check NUMBER := -7;
BEGIN
    IF number_to_check > 0 THEN
        DBMS_OUTPUT.PUT_LINE('The number is positive.');
    ELSIF number_to_check < 0 THEN
        DBMS_OUTPUT.PUT_LINE('The number is negative.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('The number is zero.');
    END IF;
END;

2. 
DECLARE
    gender VARCHAR2(10) := 'M';
    gender_label VARCHAR2(10);
BEGIN
    CASE gender
        WHEN 'M' THEN
            gender_label := 'Male';
        WHEN 'F' THEN
            gender_label := 'Female';
        ELSE
            gender_label := 'Unknown';
    END CASE;

    DBMS_OUTPUT.PUT_LINE('Gender: ' || gender_label);
END;




